# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...errors.bad_request_error import BadRequestError
from ...errors.internal_server_error import InternalServerError
from ...errors.too_many_requests_error import TooManyRequestsError
from ...errors.unauthorized_error import UnauthorizedError
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.bad_request_error_body import BadRequestErrorBody
from ...types.internal_error import InternalError
from ...types.reranking_response import RerankingResponse
from ...types.text_document import TextDocument
from ...types.too_many_requests_error_body import TooManyRequestsErrorBody
from ...types.unauthorized_error_body import UnauthorizedErrorBody
from ...types.unprocessable_entity_error_body import UnprocessableEntityErrorBody

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RerankClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def reranking(
        self,
        *,
        model: str,
        input: typing.List[TextDocument],
        query: TextDocument,
        top_k: typing.Optional[int] = OMIT,
        return_input: typing.Optional[bool] = OMIT,
    ) -> RerankingResponse:
        """
        Parameters:
            - model: str. The model to use for creating embeddings

            - input: typing.List[TextDocument]. The input documents to rerank

            - query: TextDocument. The query to rerank the documents

            - top_k: typing.Optional[int]. The number of documents to return

            - return_input: typing.Optional[bool]. Whether to return the documents
        ---
        from mixedbread import TextDocument
        from mixedbread.client import Client

        client = Client(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.rerank.reranking(
            model="model",
            input=[
                TextDocument(
                    text="text",
                )
            ],
            query=TextDocument(
                text="text",
            ),
            top_k=10,
            return_input=False,
        )
        """
        _request: typing.Dict[str, typing.Any] = {"model": model, "input": input, "query": query}
        if top_k is not OMIT:
            _request["top_k"] = top_k
        if return_input is not OMIT:
            _request["return_input"] = return_input
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v1/reranking"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(RerankingResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(BadRequestErrorBody, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(UnauthorizedErrorBody, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic.parse_obj_as(UnprocessableEntityErrorBody, _response.json())  # type: ignore
            )
        if _response.status_code == 429:
            raise TooManyRequestsError(
                pydantic.parse_obj_as(TooManyRequestsErrorBody, _response.json())  # type: ignore
            )
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(InternalError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncRerankClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def reranking(
        self,
        *,
        model: str,
        input: typing.List[TextDocument],
        query: TextDocument,
        top_k: typing.Optional[int] = OMIT,
        return_input: typing.Optional[bool] = OMIT,
    ) -> RerankingResponse:
        """
        Parameters:
            - model: str. The model to use for creating embeddings

            - input: typing.List[TextDocument]. The input documents to rerank

            - query: TextDocument. The query to rerank the documents

            - top_k: typing.Optional[int]. The number of documents to return

            - return_input: typing.Optional[bool]. Whether to return the documents
        ---
        from mixedbread import TextDocument
        from mixedbread.client import AsyncClient

        client = AsyncClient(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        await client.rerank.reranking(
            model="model",
            input=[
                TextDocument(
                    text="text",
                )
            ],
            query=TextDocument(
                text="text",
            ),
            top_k=10,
            return_input=False,
        )
        """
        _request: typing.Dict[str, typing.Any] = {"model": model, "input": input, "query": query}
        if top_k is not OMIT:
            _request["top_k"] = top_k
        if return_input is not OMIT:
            _request["return_input"] = return_input
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v1/reranking"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(RerankingResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(BadRequestErrorBody, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(UnauthorizedErrorBody, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic.parse_obj_as(UnprocessableEntityErrorBody, _response.json())  # type: ignore
            )
        if _response.status_code == 429:
            raise TooManyRequestsError(
                pydantic.parse_obj_as(TooManyRequestsErrorBody, _response.json())  # type: ignore
            )
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(InternalError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
