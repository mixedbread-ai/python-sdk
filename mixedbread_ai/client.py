# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

import httpx

from .core.api_error import ApiError
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .core.pydantic_utilities import pydantic_v1
from .core.request_options import RequestOptions
from .environment import MixedbreadAIEnvironment
from .errors.bad_request_error import BadRequestError
from .errors.forbidden_error import ForbiddenError
from .errors.internal_server_error import InternalServerError
from .errors.not_found_error import NotFoundError
from .errors.too_many_requests_error import TooManyRequestsError
from .errors.unauthorized_error import UnauthorizedError
from .errors.unprocessable_entity_error import UnprocessableEntityError
from .types.bad_request_error_body import BadRequestErrorBody
from .types.embeddings_request_encoding_format import EmbeddingsRequestEncodingFormat
from .types.embeddings_response import EmbeddingsResponse
from .types.forbidden_error_body import ForbiddenErrorBody
from .types.input import Input
from .types.internal_error import InternalError
from .types.multi_modal_input import MultiModalInput
from .types.not_found_error_body import NotFoundErrorBody
from .types.query import Query
from .types.reranking_response import RerankingResponse
from .types.too_many_requests_error_body import TooManyRequestsErrorBody
from .types.truncation_strategy import TruncationStrategy
from .types.unauthorized_error_body import UnauthorizedErrorBody
from .types.validation_error import ValidationError

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class MixedbreadAI:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : MixedbreadAIEnvironment
        The environment to use for requests from the client. from .environment import MixedbreadAIEnvironment



        Defaults to MixedbreadAIEnvironment.DEFAULT



    api_key : str
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from mixedbread-ai.client import MixedbreadAI

    client = MixedbreadAI(api_key="YOUR_API_KEY", )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: MixedbreadAIEnvironment = MixedbreadAIEnvironment.DEFAULT,
        api_key: str,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            api_key=api_key,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )

    def embeddings(
        self,
        *,
        model: str,
        input: MultiModalInput,
        normalized: typing.Optional[bool] = OMIT,
        encoding_format: typing.Optional[EmbeddingsRequestEncodingFormat] = OMIT,
        truncation_strategy: typing.Optional[TruncationStrategy] = OMIT,
        dimensions: typing.Optional[int] = OMIT,
        instruction: typing.Optional[str] = OMIT,
        texts: typing.Optional[typing.Sequence[str]] = OMIT,
        prompt: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> EmbeddingsResponse:
        """
        Create embeddings for text or images using the specified model, encoding format, and normalization.

        Parameters
        ----------
        model : str
            The model to use for creating embeddings

        input : MultiModalInput

        normalized : typing.Optional[bool]
            Whether to normalize the embeddings

        encoding_format : typing.Optional[EmbeddingsRequestEncodingFormat]

        truncation_strategy : typing.Optional[TruncationStrategy]
            The truncation strategy to use for the input

        dimensions : typing.Optional[int]
            The number of dimensions to use for the embeddings. Only available for Matryoshka models.

        instruction : typing.Optional[str]
            The instruction to use for the embeddings

        texts : typing.Optional[typing.Sequence[str]]
            The texts to use for the embeddings

        prompt : typing.Optional[str]
            The prompt to use for the embedding creation.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmbeddingsResponse
            The embeddings for the input text or image

        Examples
        --------
        from mixedbread-ai.client import MixedbreadAI

        client = MixedbreadAI(api_key="YOUR_API_KEY", )
        client.embeddings(model='model', input='input', )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/embeddings",
            method="POST",
            json={
                "model": model,
                "input": input,
                "normalized": normalized,
                "encoding_format": encoding_format,
                "truncation_strategy": truncation_strategy,
                "dimensions": dimensions,
                "instruction": instruction,
                "texts": texts,
                "prompt": prompt,
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(EmbeddingsResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic_v1.parse_obj_as(BadRequestErrorBody, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic_v1.parse_obj_as(UnauthorizedErrorBody, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic_v1.parse_obj_as(ForbiddenErrorBody, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic_v1.parse_obj_as(NotFoundErrorBody, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic_v1.parse_obj_as(ValidationError, _response.json()))  # type: ignore
        if _response.status_code == 429:
            raise TooManyRequestsError(
                pydantic_v1.parse_obj_as(TooManyRequestsErrorBody, _response.json())  # type: ignore
            )
        if _response.status_code == 500:
            raise InternalServerError(pydantic_v1.parse_obj_as(InternalError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def reranking(
        self,
        *,
        model: str,
        input: Input,
        query: Query,
        top_k: typing.Optional[int] = OMIT,
        return_input: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> RerankingResponse:
        """
        Parameters
        ----------
        model : str
            The model to use for creating embeddings

        input : Input
            The input documents to rerank

        query : Query
            The query to rerank the documents

        top_k : typing.Optional[int]
            The number of documents to return

        return_input : typing.Optional[bool]
            Whether to return the documents

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RerankingResponse
            The reranked documents for the input query

        Examples
        --------
        from mixedbread-ai import TextDocument
        from mixedbread-ai.client import MixedbreadAI

        client = MixedbreadAI(api_key="YOUR_API_KEY", )
        client.reranking(model='model', input=['input'], query=TextDocument(text='text', ), )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/reranking",
            method="POST",
            json={"model": model, "input": input, "query": query, "top_k": top_k, "return_input": return_input},
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(RerankingResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic_v1.parse_obj_as(BadRequestErrorBody, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic_v1.parse_obj_as(UnauthorizedErrorBody, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic_v1.parse_obj_as(ForbiddenErrorBody, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic_v1.parse_obj_as(NotFoundErrorBody, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic_v1.parse_obj_as(ValidationError, _response.json()))  # type: ignore
        if _response.status_code == 429:
            raise TooManyRequestsError(
                pydantic_v1.parse_obj_as(TooManyRequestsErrorBody, _response.json())  # type: ignore
            )
        if _response.status_code == 500:
            raise InternalServerError(pydantic_v1.parse_obj_as(InternalError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncMixedbreadAI:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : MixedbreadAIEnvironment
        The environment to use for requests from the client. from .environment import MixedbreadAIEnvironment



        Defaults to MixedbreadAIEnvironment.DEFAULT



    api_key : str
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from mixedbread-ai.client import AsyncMixedbreadAI

    client = AsyncMixedbreadAI(api_key="YOUR_API_KEY", )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: MixedbreadAIEnvironment = MixedbreadAIEnvironment.DEFAULT,
        api_key: str,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            api_key=api_key,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )

    async def embeddings(
        self,
        *,
        model: str,
        input: MultiModalInput,
        normalized: typing.Optional[bool] = OMIT,
        encoding_format: typing.Optional[EmbeddingsRequestEncodingFormat] = OMIT,
        truncation_strategy: typing.Optional[TruncationStrategy] = OMIT,
        dimensions: typing.Optional[int] = OMIT,
        instruction: typing.Optional[str] = OMIT,
        texts: typing.Optional[typing.Sequence[str]] = OMIT,
        prompt: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> EmbeddingsResponse:
        """
        Create embeddings for text or images using the specified model, encoding format, and normalization.

        Parameters
        ----------
        model : str
            The model to use for creating embeddings

        input : MultiModalInput

        normalized : typing.Optional[bool]
            Whether to normalize the embeddings

        encoding_format : typing.Optional[EmbeddingsRequestEncodingFormat]

        truncation_strategy : typing.Optional[TruncationStrategy]
            The truncation strategy to use for the input

        dimensions : typing.Optional[int]
            The number of dimensions to use for the embeddings. Only available for Matryoshka models.

        instruction : typing.Optional[str]
            The instruction to use for the embeddings

        texts : typing.Optional[typing.Sequence[str]]
            The texts to use for the embeddings

        prompt : typing.Optional[str]
            The prompt to use for the embedding creation.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmbeddingsResponse
            The embeddings for the input text or image

        Examples
        --------
        from mixedbread-ai.client import AsyncMixedbreadAI

        client = AsyncMixedbreadAI(api_key="YOUR_API_KEY", )
        await client.embeddings(model='model', input='input', )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/embeddings",
            method="POST",
            json={
                "model": model,
                "input": input,
                "normalized": normalized,
                "encoding_format": encoding_format,
                "truncation_strategy": truncation_strategy,
                "dimensions": dimensions,
                "instruction": instruction,
                "texts": texts,
                "prompt": prompt,
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(EmbeddingsResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic_v1.parse_obj_as(BadRequestErrorBody, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic_v1.parse_obj_as(UnauthorizedErrorBody, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic_v1.parse_obj_as(ForbiddenErrorBody, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic_v1.parse_obj_as(NotFoundErrorBody, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic_v1.parse_obj_as(ValidationError, _response.json()))  # type: ignore
        if _response.status_code == 429:
            raise TooManyRequestsError(
                pydantic_v1.parse_obj_as(TooManyRequestsErrorBody, _response.json())  # type: ignore
            )
        if _response.status_code == 500:
            raise InternalServerError(pydantic_v1.parse_obj_as(InternalError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def reranking(
        self,
        *,
        model: str,
        input: Input,
        query: Query,
        top_k: typing.Optional[int] = OMIT,
        return_input: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> RerankingResponse:
        """
        Parameters
        ----------
        model : str
            The model to use for creating embeddings

        input : Input
            The input documents to rerank

        query : Query
            The query to rerank the documents

        top_k : typing.Optional[int]
            The number of documents to return

        return_input : typing.Optional[bool]
            Whether to return the documents

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RerankingResponse
            The reranked documents for the input query

        Examples
        --------
        from mixedbread-ai import TextDocument
        from mixedbread-ai.client import AsyncMixedbreadAI

        client = AsyncMixedbreadAI(api_key="YOUR_API_KEY", )
        await client.reranking(model='model', input=['input'], query=TextDocument(text='text', ), )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/reranking",
            method="POST",
            json={"model": model, "input": input, "query": query, "top_k": top_k, "return_input": return_input},
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(RerankingResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic_v1.parse_obj_as(BadRequestErrorBody, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic_v1.parse_obj_as(UnauthorizedErrorBody, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic_v1.parse_obj_as(ForbiddenErrorBody, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic_v1.parse_obj_as(NotFoundErrorBody, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic_v1.parse_obj_as(ValidationError, _response.json()))  # type: ignore
        if _response.status_code == 429:
            raise TooManyRequestsError(
                pydantic_v1.parse_obj_as(TooManyRequestsErrorBody, _response.json())  # type: ignore
            )
        if _response.status_code == 500:
            raise InternalServerError(pydantic_v1.parse_obj_as(InternalError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: MixedbreadAIEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
